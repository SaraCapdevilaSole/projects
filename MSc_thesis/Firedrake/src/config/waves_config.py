import numpy as np

with_amplitude = False

bands_range = {
    "delta": (0.5, 3),
    "theta": (4, 7),
    "alpha": (8, 15),
    "beta": (14, 30),
    "gamma": (36, 44),
    "gamma high": (50, 100),
    "gamma very high": (100, 150)
}
# from: https://www.sciencedirect.com/science/article/pii/S016784421200064X

bands_amplitude = { #Â in micro volts
    "delta": 110,
    "theta": 60,
    "alpha": 40,
    "beta": 11,
    "gamma": 4,
    # "gamma high": 75,
    # "gamma very high": 125,
}

bands_mean = {
    "delta": 2,
    "theta": 6,
    "alpha": 12,
    "beta": 22,
    "gamma": 40,
    "gamma high": 75,
    "gamma very high": 125,
}

# random_numbers = np.random.rand(20, 2)
# random_tuples = [tuple(row) for row in random_numbers]
# print(random_tuples)

sources_2d = np.array([
    (0.029718512853793344, 0.8716452743203177),
    (0.21498408231411958, 0.7388398620023181), 
    (0.7966767681926875, 0.6171640367876514),
    (0.37128565670282987, 0.22007066406771558), 
    (0.8526190238138224, 0.39868153519242533), 
    (0.6292637997263526, 0.9127000046877554), 
    (0.5460196221875436, 0.18761271119370937), 
    (0.23557099720366548, 0.10894846451508955),
    (0.8183231022581631, 0.9187431685788614), 
])

# random_numbers = np.random.uniform(-0.1, 0.1, (10, 2))
# random_tuples = [tuple(row) for row in random_numbers]
# print(random_tuples)

speed_sources_2d = np.array([
    (0.009321947790091989, -0.030790495763255196), 
    (0.08299397351448928, 0.018574396994712722), 
    (0.024070081562605303, 0.08141237022889888), 
    (-0.08806395242434038, 0.06796280386378259), 
    (0.09132779567073915, -0.04828039163215658), 
    (0.001551250632302839, -0.01391199301498433), 
    (0.09258741245705379, -0.015208889749087046), 
    (0.09780450156428427, -0.08610253403192539), 
    (-0.08858189316897747, -0.028171353302825705), 
    (0.05318691362062716, -0.04807110182762042)
]) * 10

spacing = 5 # 5 : 2d
max_f = 80 # 80 : 2d
frequencies_pink = np.arange(1, max_f + spacing, spacing)

# random_numbers = np.random.rand(10)
# print(', '.join([str(rn) for rn in random_numbers]))

# def xyz(r, phi, theta):
#     x = r * np.sin(phi) * np.cos(theta)
#     y = r * np.sin(phi) * np.sin(theta)
#     z = r * np.cos(phi)
#     return list(zip(x, y, z))

# def generate_sphere_points(num_points, radius=1, surface_only=False): 
#     r = radius if surface_only else radius * np.cbrt(np.random.rand(num_points))
#     theta = 2 * np.pi * np.random.rand(num_points)  
#     phi = np.arccos(1 - 2 * np.random.rand(num_points))
#     return xyz(r, phi, theta)

# num_points = 10 
# inside_points = generate_sphere_points(num_points, radius=1, surface_only=False)

# for point in inside_points:
#     print(point)

sources_3d = np.array([
    (-0.1541418001906502, 0.17613574803971815, -0.8403192399137376),
    (-0.159748719130701, -0.559347469307465, 0.7727151434385062),
    (-0.8701900521739256, -0.029648105575562442, 0.29328783838926775),
    (0.44387657656970386, -0.3588745079602344, 0.6545577753130077),
    (-0.34681626346433464, -0.790177951083181, -0.05720987392637132),
    (-0.3629227862437404, 0.6344444924547548, -0.48293502176960823),
    (0.767831443671653, -0.2687944839523762, -0.09059188111695685),
    (-0.2025168627301938, 0.5476142541036333, -0.7304706633705653),
    (0.35384885237442526, -0.6201454597637217, 0.004343070431033864),
    (-0.021848926707657413, -0.06499607012744174, 0.9105251699667609),
])

# random_sources = np.random.uniform(-0.1, 0.1, (num_points, 3))
# for row in random_sources:
#     print(tuple(row), ',')

speed_sources_3d = np.array([
    (-0.08985056150054974, -0.008882406449874009, 0.04019719764706847),
    (0.0581112260698049, 0.058453904571396736, -0.02104289838781495),
    (0.019424839824088352, -0.02676395112787662, -0.08269633589534109),
    (-0.08440624592882484, 0.07395002003195347, -0.07151556071708548),
    (-0.06081282737864278, -0.05554740654884103, 0.08807620364131338),
    (0.06845928237086446, -0.04850082131944389, -0.025122832182760083),
    (-0.034297348975401806, 0.016270208831026728, -0.09505357563931414),
    (-0.01187167676363235, -0.011372412393442305, 0.013167872287392163),
    (0.06817318510689108, 0.07170327061888765, -0.06894661548157868),
    (-0.015584063812601134, -0.04227735964968067, -0.04846895234853399),
]) * 10